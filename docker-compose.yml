version: '3.8'

services:
  front_service:
    build:
      context: ${PROJECT_ROOT_PATH}
      dockerfile: ${PROJECT_ROOT_PATH}/front_service/Dockerfile

    container_name: front_service
    hostname: front_service
    environment:
      - SERVICE_NAME=front_service

      - LOG_LEVEL=debug
      - LOG_PATH=${FRONT_SERVICE_LOG_PATH}

      - REST_SERVICE_ADDRESS=front_service:${FRONT_REST_SERVICE_PORT}
      - REST_FRONT_SERVICE_READ_TIMEOUT_SECONDS=2
      - REST_FRONT_SERVICE_WRITE_TIMEOUT_SECONDS=2
      - REST_FRONT_SERVICE_IDLE_TIMEOUT_SECONDS=15
      - REST_FRONT_SERVICE_READ_HEADER_TIMEOUT_SECONDS=2
      - GRPC_SERVICE_ADDRESS=front_service:${FRONT_GRPC_SERVICE_PORT}

      - USER_SERVICE_ADDRESS=user_service:${USER_SERVICE_PORT}

      - SANDBOX_SERVICE_ADDRESS=sandbox_service:${SANDBOX_SERVICE_PORT}

      - GRPC_CONNECTION_BACKOFF_DELAY_MILLISECONDS=1000
      - GRPC_CONNECTION_BACKOFF_MULTIPLIER=1.6
      - GRPC_CONNECTION_BACKOFF_JITTER=0.2
      - GRPC_CONNECTION_BACKOFF_MAX_DELAY_MILLISECONDS=1000

      - JAEGER_COLLECTOR_ENDPOINT=http://jaeger:${JAEGER_COLLECTOR_PORT}/api/traces

      - MICROSERVICES_GRPC_CONNECTION_TIMEOUT_MILLISECONDS=1000

      - GRPC_CONNECTION_KEEPALIVE_TIME_MILLISECONDS=10000
      - GRPC_CONNECTION_KEEPALIVE_TIMEOUT_MILLISECONDS=20000
      - GRPC_CONNECTION_KEEPALIVE_PERMIT_WITHOUT_STREAM=false

      - GRPC_AUTHORIZARION_HEADER=authorization
      - GRPC_USER_ID_HEADER=${GRPC_USER_ID_HEADER}
      - GRPC_USER_ROLE_HEADER=${GRPC_USER_ROLE_HEADER}

      - AUTH_TOKEN_SECRET_KEY=${AUTH_TOKEN_SECRET_KEY}
      - AUTH_TOKEN_EXPIRATION_SECONDS=0

    volumes:
      - type: bind
        source: ${PROJECT_ROOT_PATH}/_log/front_service.log
        target: ${FRONT_SERVICE_LOG_PATH}
    ports:
      - "8010:${FRONT_REST_SERVICE_PORT}"
      - "8020:${FRONT_GRPC_SERVICE_PORT}"
    depends_on:
      - user_service
    networks:
      - default

  user_service:
    build:
      context: ${PROJECT_ROOT_PATH}
      dockerfile: ${PROJECT_ROOT_PATH}/user_service/Dockerfile

    container_name: user_service
    hostname: user_service
    environment:
      - SERVICE_NAME=user_service
      - SERVICE_ADDRESS=user_service:${USER_SERVICE_PORT}

      - DATABASE_URI=mongodb://${USER_SERVICE_DATABASE_USERNAME}:${USER_SERVICE_DATABASE_PASSWORD}@user_service_mongodb:${USER_SERVICE_DATABASE_PORT}
      - DATABASE_NAME=users
      - DATABASE_COLLECTION_NAME=users
      - DATABASE_OPERATION_TIMEOUT_MILLISECONDS=1000
      - DATABASE_CONNECTION_TIMEOUT_MILLISECONDS=2000
      - DATABASE_STARTUP_RECONNECTION_COUNT=10
      - DATABASE_STURTUP_RECONNECTIONION_INTERVAL_MILLISECONDS=500

      - ENABLE_DATABASE_QUERY_METRICS=true
      - ENABLE_DATABASE_QUERY_TRACING=true

      - LOG_LEVEL=debug
      - LOG_PATH=${USER_SERVICE_LOG_PATH}

      - AUTH_TOKEN_SECRET_KEY=kqR4VkjWxjKNqgKHHaY7Nq5VQaLFSXqKILL8xlAhK6zrXQvqP2OEix7Lptw4B3I
      - AUTH_TOKEN_EXPIRATION_SECONDS=10000

      - JAEGER_COLLECTOR_ENDPOINT=http://jaeger:${JAEGER_COLLECTOR_PORT}/api/traces

      - ENABLE_METRIC_SERVICE=true
      - METRICS_SERVICE_ADDRESS=user_service:${USER_SERVICE_METRICS_PORT}
      - METRICS_SERVICE_LISTING_SUFFIX=/metrics
      - METRICS_SERVICE_READ_TIMEOUT_SECONDS=1
      - METRICS_SERVICE_WRITE_TIMEOUT_SECONDS=1
      - METRICS_SERVICE_IDLE_TIMEOUT_SECONDS=15
      - METRICS_SERVICE_READ_HEADER_TIMEOUT_SECONDS=2

    volumes:
      - type: bind
        source: ${PROJECT_ROOT_PATH}/_log/user_service.log
        target: ${USER_SERVICE_LOG_PATH}
    ports:
      - "9030:${USER_SERVICE_PORT}"
      - "2112:${USER_SERVICE_METRICS_PORT}"
    depends_on:
      - user_service_mongodb
    networks:
      - default

  user_service_mongodb:
    image: mongo:latest
    container_name: user_service_mongodb
    hostname: user_service_mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${USER_SERVICE_DATABASE_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${USER_SERVICE_DATABASE_PASSWORD}
    # volumes:
    #   - /todo/mongodb:/usr/src/messenger
    ports:
      - "27017:${USER_SERVICE_DATABASE_PORT}"
    networks:
      - default

  sandbox_service:
    privileged: true
    build:
      context: ${PROJECT_ROOT_PATH}
      dockerfile: ${PROJECT_ROOT_PATH}/sandbox_service/Dockerfile

    container_name: sandbox_service
    hostname: sandbox_service
    environment:
      - SERVICE_ADDRESS=sandbox_service:${SANDBOX_SERVICE_PORT}
      - SERVICE_NAME=sandbox_service

      - WORKER_POOL_WORKERS_COUNT=4

      - DOCKER_CODE_RUNNER_IMAGE_NAME=sandbox:latest
      - DOCKER_CODE_RUNNER_IMAGE_PATH=/app/sandbox.tar
      - DOCKER_CODE_RUNNER_CLIENT_VERSION=1.41
      - DOCKER_CODE_RUNNER_MEMORY_LIMITATION_BYTES=134217728 # 128 Mbytes
      - DOCKER_CODE_RUNNER_NETWORK_DISABLED=true
      - DOCKER_CODE_RUNNER_CONTAINER_NAME_PREFIX=tmp_
      - DOCKER_CODE_RUNNER_GO_IMAGE_SOURCE_DIRECTORY=/app
      - DOCKER_CODE_RUNNER_PROGRAM_EXECUTION_TIMEOUT_MILLISECONDS=5000
      - DOCKER_CODE_RUNNER_INPUT_SOURCE_CODE_LIMITATION_BYTE=8000
      - DOCKER_CODE_RUNNER_OUTPUT_STDOUT_LIMITATION_BYTE=6000
      - DOCKER_CODE_RUNNER_OUTPUT_STDERR_LIMITATION_BYTE=6000

      - GRPC_USER_ID_HEADER=${GRPC_USER_ID_HEADER}
      - GRPC_USER_ROLE_HEADER=${GRPC_USER_ROLE_HEADER}

      - LOG_LEVEL=debug
      - LOG_PATH=${SANDBOX_SERVICE_LOG_PATH}

      - KAFKA_BROKER_ADDRESS=kafka_broker:${KAFKA_BROKER_PORT}
      - KAFKA_CODE_RUNNER_TOPIC=code_runner_results
      - KAFKA_WRITER_WRITE_TIMEOUT_MILLISECONDS=10000
      - KAFKA_WRITER_READ_TIMEOUT_MILLISECONDS=10000

      - DATABASE_URI=mongodb://${SANDBOX_SERVICE_DATABASE_USERNAME}:${SANDBOX_SERVICE_DATABASE_PASSWORD}@sandbox_service_mongodb:${SANDBOX_SERVICE_DATABASE_PORT}
      - DATABASE_NAME=sandbox
      - DATABASE_COLLECTION_NAME=programs
      - DATABASE_OPERATION_TIMEOUT_MILLISECONDS=1000
      - DATABASE_CONNECTION_TIMEOUT_MILLISECONDS=2000
      - DATABASE_STARTUP_RECONNECTION_COUNT=10
      - DATABASE_STURTUP_RECONNECTIONION_INTERVAL_MILLISECONDS=500

      - JAEGER_COLLECTOR_ENDPOINT=http://jaeger:${JAEGER_COLLECTOR_PORT}/api/traces
    volumes:
      - type: bind
        source: ${PROJECT_ROOT_PATH}/_log/sandbox_service.log
        target: ${SANDBOX_SERVICE_LOG_PATH}
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PROJECT_ROOT_PATH}/sandbox_service/docker/images/sandbox.tar:/app/sandbox.tar
    ports:
      - "9042:${SANDBOX_SERVICE_PORT}"
    networks:
      - default

  sandbox_service_mongodb:
    image: mongo:latest
    container_name: sandbox_service_mongodb
    hostname: sandbox_service_mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${SANDBOX_SERVICE_DATABASE_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${SANDBOX_SERVICE_DATABASE_PASSWORD}
    ports:
      - "27016:${SANDBOX_SERVICE_DATABASE_PORT}"
    networks:
      - default

  kafka_broker:
    image: bitnami/kafka:latest
    container_name: kafka_broker
    hostname: kafka_broker
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:${KAFKA_BROKER_PORT},CONTROLLER://:${KAFKA_CONTROLLER_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka_broker:${KAFKA_BROKER_PORT}
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka_broker:${KAFKA_CONTROLLER_PORT}
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=fM42aVuVTOC2GZbUYkG91g
      - BITNAMI_DEBUG=false
      # volumes:
      #   - /todo/volume:/bitnami/kafka
    ports:
      - "9092:${KAFKA_BROKER_PORT}"
    networks:
      - default

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    hostname: kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=kraft
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka_broker:${KAFKA_BROKER_PORT}
      - SERVER_PORT=${KAFKA_UI_PORT}
    ports:
      - "9080:${KAFKA_UI_PORT}"
    networks:
      - default
    depends_on:
      - kafka_broker

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    hostname: jaeger
    ports:
      - "14268:${JAEGER_COLLECTOR_PORT}/udp"
      - "16686:${JAEGER_UI_PORT}"
    networks:
      - default

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - ./prometheus:/etc/prometheus/
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:${PROMETHEUS_UI_PORT}"
    networks:
      - default

networks:
  default:
    driver: bridge
