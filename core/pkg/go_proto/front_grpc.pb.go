// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pkg/proto/front.proto

package go_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontUserClient is the client API for FrontUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontUserClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserDataResponse, error)
}

type frontUserClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontUserClient(cc grpc.ClientConnInterface) FrontUserClient {
	return &frontUserClient{cc}
}

func (c *frontUserClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserDataResponse, error) {
	out := new(UserDataResponse)
	err := c.cc.Invoke(ctx, "/go_proto.FrontUser/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontUserServer is the server API for FrontUser service.
// All implementations must embed UnimplementedFrontUserServer
// for forward compatibility
type FrontUserServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*UserDataResponse, error)
	mustEmbedUnimplementedFrontUserServer()
}

// UnimplementedFrontUserServer must be embedded to have forward compatible implementations.
type UnimplementedFrontUserServer struct {
}

func (UnimplementedFrontUserServer) CreateUser(context.Context, *CreateUserRequest) (*UserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedFrontUserServer) mustEmbedUnimplementedFrontUserServer() {}

// UnsafeFrontUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontUserServer will
// result in compilation errors.
type UnsafeFrontUserServer interface {
	mustEmbedUnimplementedFrontUserServer()
}

func RegisterFrontUserServer(s grpc.ServiceRegistrar, srv FrontUserServer) {
	s.RegisterService(&FrontUser_ServiceDesc, srv)
}

func _FrontUser_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontUserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_proto.FrontUser/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontUserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontUser_ServiceDesc is the grpc.ServiceDesc for FrontUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_proto.FrontUser",
	HandlerType: (*FrontUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _FrontUser_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/front.proto",
}
