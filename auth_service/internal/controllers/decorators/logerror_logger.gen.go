// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../core/pkg/decorators/templates/logerror_logger.go
// gowrap: http://github.com/hexdigest/gowrap

package decorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/auth_service/internal/controllers -i AccountController -t ../../../../core/pkg/decorators/templates/logerror_logger.go -o logerror_logger.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/auth_service/internal/controllers"
	"github.com/YFatMR/go_messenger/core/pkg/errors/logerr"
	"github.com/YFatMR/go_messenger/core/pkg/loggers"
	"github.com/YFatMR/go_messenger/protocol/pkg/proto"
)

// LoggingAccountControllerDecorator implements controllers.AccountController that is instrumented with custom zap logger
type LoggingAccountControllerDecorator struct {
	logger *loggers.OtelZapLoggerWithTraceID
	base   controllers.AccountController
}

// NewLoggingAccountControllerDecorator instruments an implementation of the controllers.AccountController with simple logging
func NewLoggingAccountControllerDecorator(base controllers.AccountController, logger *loggers.OtelZapLoggerWithTraceID) *LoggingAccountControllerDecorator {
	if base == nil {
		panic("LoggingAccountControllerDecorator got empty base")
	}
	if logger == nil {
		panic("LoggingAccountControllerDecorator got empty logger")
	}
	return &LoggingAccountControllerDecorator{
		base:   base,
		logger: logger,
	}
}

// CreateAccount implements controllers.AccountController
func (d *LoggingAccountControllerDecorator) CreateAccount(ctx context.Context, request *proto.Credential) (accountID *proto.AccountID, lerr logerr.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingAccountControllerDecorator: calling CreateAccount")
	defer func() {
		defer d.logger.DebugContextNoExport(ctx, "LoggingAccountControllerDecorator: CreateAccount finished")
		if lerr == nil {
			return
		}
		if lerr.IsLogMessage() {
			d.logger.LogContextLogerror(ctx, lerr)
			lerr.StopLogMessage()
		}
	}()
	return d.base.CreateAccount(ctx, request)
}

// GetToken implements controllers.AccountController
func (d *LoggingAccountControllerDecorator) GetToken(ctx context.Context, request *proto.Credential) (token *proto.Token, lerr logerr.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingAccountControllerDecorator: calling GetToken")
	defer func() {
		defer d.logger.DebugContextNoExport(ctx, "LoggingAccountControllerDecorator: GetToken finished")
		if lerr == nil {
			return
		}
		if lerr.IsLogMessage() {
			d.logger.LogContextLogerror(ctx, lerr)
			lerr.StopLogMessage()
		}
	}()
	return d.base.GetToken(ctx, request)
}

// GetTokenPayload implements controllers.AccountController
func (d *LoggingAccountControllerDecorator) GetTokenPayload(ctx context.Context, request *proto.Token) (tokenPayload *proto.TokenPayload, lerr logerr.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingAccountControllerDecorator: calling GetTokenPayload")
	defer func() {
		defer d.logger.DebugContextNoExport(ctx, "LoggingAccountControllerDecorator: GetTokenPayload finished")
		if lerr == nil {
			return
		}
		if lerr.IsLogMessage() {
			d.logger.LogContextLogerror(ctx, lerr)
			lerr.StopLogMessage()
		}
	}()
	return d.base.GetTokenPayload(ctx, request)
}

// Ping implements controllers.AccountController
func (d *LoggingAccountControllerDecorator) Ping(ctx context.Context, request *proto.Void) (pong *proto.Pong, lerr logerr.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingAccountControllerDecorator: calling Ping")
	defer func() {
		defer d.logger.DebugContextNoExport(ctx, "LoggingAccountControllerDecorator: Ping finished")
		if lerr == nil {
			return
		}
		if lerr.IsLogMessage() {
			d.logger.LogContextLogerror(ctx, lerr)
			lerr.StopLogMessage()
		}
	}()
	return d.base.Ping(ctx, request)
}
