// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../core/pkg/decorators/templates/logerr_cleaner.go
// gowrap: http://github.com/hexdigest/gowrap

package decorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/auth_service/internal/controllers -i AccountController -t ../../../../core/pkg/decorators/templates/logerr_cleaner.go -o logerr_cleaner.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/auth_service/internal/controllers"
	"github.com/YFatMR/go_messenger/core/pkg/errors/logerr"
	"github.com/YFatMR/go_messenger/protocol/pkg/proto"
)

// LogerrCleanerAccountControllerDecorator implements controllers.AccountController
// Use LogerrCleanerAccountControllerDecorator to make logerr.Error nil if it has no error
// Use LogerrCleanerAccountControllerDecorator as last decorator in your chain
type LogerrCleanerAccountControllerDecorator struct {
	base controllers.AccountController
}

// NewLogerrCleanerAccountControllerDecorator instruments an implementation of the controllers.AccountController with simple logging
func NewLogerrCleanerAccountControllerDecorator(base controllers.AccountController) *LogerrCleanerAccountControllerDecorator {
	if base == nil {
		panic("LogerrCleanerAccountControllerDecorator got empty base")
	}
	return &LogerrCleanerAccountControllerDecorator{
		base: base,
	}
}

// CreateAccount implements controllers.AccountController
func (d *LogerrCleanerAccountControllerDecorator) CreateAccount(ctx context.Context, request *proto.Credential) (accountID *proto.AccountID, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.CreateAccount(ctx, request)
}

// GetToken implements controllers.AccountController
func (d *LogerrCleanerAccountControllerDecorator) GetToken(ctx context.Context, request *proto.Credential) (token *proto.Token, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.GetToken(ctx, request)
}

// GetTokenPayload implements controllers.AccountController
func (d *LogerrCleanerAccountControllerDecorator) GetTokenPayload(ctx context.Context, request *proto.Token) (tokenPayload *proto.TokenPayload, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.GetTokenPayload(ctx, request)
}

// Ping implements controllers.AccountController
func (d *LogerrCleanerAccountControllerDecorator) Ping(ctx context.Context, request *proto.Void) (pong *proto.Pong, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.Ping(ctx, request)
}
