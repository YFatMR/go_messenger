// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../core/pkg/decorators/templates/logerror_logger.go
// gowrap: http://github.com/hexdigest/gowrap

package decorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/auth_service/internal/repositories -i AccountRepository -t ../../../../core/pkg/decorators/templates/logerror_logger.go -o logerror_logger.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/auth_service/internal/entities"
	"github.com/YFatMR/go_messenger/auth_service/internal/entities/accountid"
	"github.com/YFatMR/go_messenger/auth_service/internal/entities/credential"
	"github.com/YFatMR/go_messenger/auth_service/internal/entities/tokenpayload"
	"github.com/YFatMR/go_messenger/auth_service/internal/repositories"
	"github.com/YFatMR/go_messenger/core/pkg/errors/logerr"
	"github.com/YFatMR/go_messenger/core/pkg/loggers"
)

// LoggingAccountRepositoryDecorator implements repositories.AccountRepository that is instrumented with custom zap logger
type LoggingAccountRepositoryDecorator struct {
	logger *loggers.OtelZapLoggerWithTraceID
	base   repositories.AccountRepository
}

// NewLoggingAccountRepositoryDecorator instruments an implementation of the repositories.AccountRepository with simple logging
func NewLoggingAccountRepositoryDecorator(base repositories.AccountRepository, logger *loggers.OtelZapLoggerWithTraceID) *LoggingAccountRepositoryDecorator {
	if base == nil {
		panic("LoggingAccountRepositoryDecorator got empty base")
	}
	if logger == nil {
		panic("LoggingAccountRepositoryDecorator got empty logger")
	}
	return &LoggingAccountRepositoryDecorator{
		base:   base,
		logger: logger,
	}
}

// CreateAccount implements repositories.AccountRepository
func (d *LoggingAccountRepositoryDecorator) CreateAccount(ctx context.Context, credential *credential.Entity, role entities.Role) (accountID *accountid.Entity, lerr logerr.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingAccountRepositoryDecorator: calling CreateAccount")
	defer func() {
		defer d.logger.DebugContextNoExport(ctx, "LoggingAccountRepositoryDecorator: CreateAccount finished")
		if lerr == nil {
			return
		}
		if lerr.IsLogMessage() {
			// TODO: create special template for nil error logick
			// If we have no error, make error nil to prevent logging the same message many times
			d.logger.LogContextLogerror(ctx, lerr)
			lerr.StopLogMessage()
		}
		if !lerr.HasError() {
			lerr = nil
		}
	}()
	return d.base.CreateAccount(ctx, credential, role)
}

// GetTokenPayloadWithHashedPasswordByLogin implements repositories.AccountRepository
func (d *LoggingAccountRepositoryDecorator) GetTokenPayloadWithHashedPasswordByLogin(ctx context.Context, login string) (tokenPayload *tokenpayload.Entity, hashedPassword string, lerr logerr.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingAccountRepositoryDecorator: calling GetTokenPayloadWithHashedPasswordByLogin")
	defer func() {
		defer d.logger.DebugContextNoExport(ctx, "LoggingAccountRepositoryDecorator: GetTokenPayloadWithHashedPasswordByLogin finished")
		if lerr == nil {
			return
		}
		if lerr.IsLogMessage() {
			// TODO: create special template for nil error logick
			// If we have no error, make error nil to prevent logging the same message many times
			d.logger.LogContextLogerror(ctx, lerr)
			lerr.StopLogMessage()
		}
		if !lerr.HasError() {
			lerr = nil
		}
	}()
	return d.base.GetTokenPayloadWithHashedPasswordByLogin(ctx, login)
}
