// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../core/pkg/decorators/templates/prometheus_metrics.go
// gowrap: http://github.com/hexdigest/gowrap

package decorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/auth_service/internal/repositories -i AccountRepository -t ../../../../core/pkg/decorators/templates/prometheus_metrics.go -o prometheus_metrics.gen.go -v metricPrefix=database_query -l ""

import (
	"context"
	"time"

	"github.com/YFatMR/go_messenger/auth_service/internal/entities"
	"github.com/YFatMR/go_messenger/auth_service/internal/entities/accountid"
	"github.com/YFatMR/go_messenger/auth_service/internal/entities/credential"
	"github.com/YFatMR/go_messenger/auth_service/internal/entities/tokenpayload"
	"github.com/YFatMR/go_messenger/auth_service/internal/repositories"
	"github.com/YFatMR/go_messenger/core/pkg/errors/logerr"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

type databaseOperatinTag string

const (
	okStatusTag    = "ok"
	errorStatusTag = "error"
)

// Prefixes:
// database_query: for database
// service_request: for seervices

// Naming rule: https://prometheus.io/docs/practices/naming/
var (
	databaseQueryDurationSeconds = promauto.NewHistogramVec(prometheus.HistogramOpts{
		Name:    "database_query_duration_seconds",
		Buckets: []float64{0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 2, 4},
		Help:    "Duration of one database query",
	}, []string{"status", "operation"})
	databaseQueryProcessedTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "database_query_processed_total",
		Help: "Count of query to database",
	}, []string{"status", "operation"})
	databaseQueryStartProcessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "database_query_start_process_total",
		Help: "Count of started queries",
	})
)

// PrometheusMetricsAccountRepositoryDecorator implements repositories.AccountRepository that is instrumented with custom zap logger
type PrometheusMetricsAccountRepositoryDecorator struct {
	base repositories.AccountRepository
}

// NewPrometheusMetricsAccountRepositoryDecorator instruments an implementation of the repositories.AccountRepository with simple logging
func NewPrometheusMetricsAccountRepositoryDecorator(base repositories.AccountRepository) *PrometheusMetricsAccountRepositoryDecorator {
	if base == nil {
		panic("PrometheusMetricsAccountRepositoryDecorator got empty base")
	}
	return &PrometheusMetricsAccountRepositoryDecorator{
		base: base,
	}
}

// CreateAccount implements repositories.AccountRepository
func (d *PrometheusMetricsAccountRepositoryDecorator) CreateAccount(ctx context.Context, credential *credential.Entity, role entities.Role) (accountID *accountid.Entity, lerr logerr.Error) {

	startTime := time.Now()
	databaseQueryStartProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag
		if lerr != nil && lerr.HasError() {
			statusTag = errorStatusTag
		}
		databaseQueryDurationSeconds.WithLabelValues(statusTag, "create_account").Observe(functionDuration)
		databaseQueryProcessedTotal.WithLabelValues(statusTag, "create_account").Inc()
	}()
	return d.base.CreateAccount(ctx, credential, role)
}

// GetTokenPayloadWithHashedPasswordByLogin implements repositories.AccountRepository
func (d *PrometheusMetricsAccountRepositoryDecorator) GetTokenPayloadWithHashedPasswordByLogin(ctx context.Context, login string) (tokenPayload *tokenpayload.Entity, hashedPassword string, lerr logerr.Error) {

	startTime := time.Now()
	databaseQueryStartProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag
		if lerr != nil && lerr.HasError() {
			statusTag = errorStatusTag
		}
		databaseQueryDurationSeconds.WithLabelValues(statusTag, "get_token_payload_with_hashed_password_by_login").Observe(functionDuration)
		databaseQueryProcessedTotal.WithLabelValues(statusTag, "get_token_payload_with_hashed_password_by_login").Inc()
	}()
	return d.base.GetTokenPayloadWithHashedPasswordByLogin(ctx, login)
}
