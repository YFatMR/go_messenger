// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../core/pkg/decorators/templates/logerr_cleaner.go
// gowrap: http://github.com/hexdigest/gowrap

package decorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/auth_service/internal/services -i AccountService -t ../../../../core/pkg/decorators/templates/logerr_cleaner.go -o logerr_cleaner.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/auth_service/internal/entities/accountid"
	"github.com/YFatMR/go_messenger/auth_service/internal/entities/credential"
	"github.com/YFatMR/go_messenger/auth_service/internal/entities/token"
	"github.com/YFatMR/go_messenger/auth_service/internal/entities/tokenpayload"
	"github.com/YFatMR/go_messenger/auth_service/internal/services"
	"github.com/YFatMR/go_messenger/core/pkg/errors/logerr"
)

// LogerrCleanerAccountServiceDecorator implements services.AccountService
// Use LogerrCleanerAccountServiceDecorator to make logerr.Error nil if it has no error
// Use LogerrCleanerAccountServiceDecorator as last decorator in your chain
type LogerrCleanerAccountServiceDecorator struct {
	base services.AccountService
}

// NewLogerrCleanerAccountServiceDecorator instruments an implementation of the services.AccountService with simple logging
func NewLogerrCleanerAccountServiceDecorator(base services.AccountService) *LogerrCleanerAccountServiceDecorator {
	if base == nil {
		panic("LogerrCleanerAccountServiceDecorator got empty base")
	}
	return &LogerrCleanerAccountServiceDecorator{
		base: base,
	}
}

// CreateAccount implements services.AccountService
func (d *LogerrCleanerAccountServiceDecorator) CreateAccount(ctx context.Context, credential *credential.Entity) (accountID *accountid.Entity, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.CreateAccount(ctx, credential)
}

// GetToken implements services.AccountService
func (d *LogerrCleanerAccountServiceDecorator) GetToken(ctx context.Context, credential *credential.Entity) (token *token.Entity, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.GetToken(ctx, credential)
}

// GetTokenPayload implements services.AccountService
func (d *LogerrCleanerAccountServiceDecorator) GetTokenPayload(ctx context.Context, token *token.Entity) (tokenPayload *tokenpayload.Entity, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.GetTokenPayload(ctx, token)
}
