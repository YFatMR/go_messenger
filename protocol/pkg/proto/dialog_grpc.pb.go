// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: dialog.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DialogServiceClient is the client API for DialogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DialogServiceClient interface {
	CreateDialogWith(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Dialog, error)
	GetDialogs(ctx context.Context, in *GetDialogsRequest, opts ...grpc.CallOption) (*GetDialogsResponse, error)
	CreateDialogMessage(ctx context.Context, in *CreateDialogMessageRequest, opts ...grpc.CallOption) (*CreateDialogMessageResponse, error)
	GetDialogMessages(ctx context.Context, in *GetDialogMessagesRequest, opts ...grpc.CallOption) (*GetDialogMessagesResponse, error)
	Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Pong, error)
}

type dialogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDialogServiceClient(cc grpc.ClientConnInterface) DialogServiceClient {
	return &dialogServiceClient{cc}
}

func (c *dialogServiceClient) CreateDialogWith(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Dialog, error) {
	out := new(Dialog)
	err := c.cc.Invoke(ctx, "/proto.DialogService/CreateDialogWith", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) GetDialogs(ctx context.Context, in *GetDialogsRequest, opts ...grpc.CallOption) (*GetDialogsResponse, error) {
	out := new(GetDialogsResponse)
	err := c.cc.Invoke(ctx, "/proto.DialogService/GetDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) CreateDialogMessage(ctx context.Context, in *CreateDialogMessageRequest, opts ...grpc.CallOption) (*CreateDialogMessageResponse, error) {
	out := new(CreateDialogMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.DialogService/CreateDialogMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) GetDialogMessages(ctx context.Context, in *GetDialogMessagesRequest, opts ...grpc.CallOption) (*GetDialogMessagesResponse, error) {
	out := new(GetDialogMessagesResponse)
	err := c.cc.Invoke(ctx, "/proto.DialogService/GetDialogMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dialogServiceClient) Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/proto.DialogService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DialogServiceServer is the server API for DialogService service.
// All implementations must embed UnimplementedDialogServiceServer
// for forward compatibility
type DialogServiceServer interface {
	CreateDialogWith(context.Context, *UserID) (*Dialog, error)
	GetDialogs(context.Context, *GetDialogsRequest) (*GetDialogsResponse, error)
	CreateDialogMessage(context.Context, *CreateDialogMessageRequest) (*CreateDialogMessageResponse, error)
	GetDialogMessages(context.Context, *GetDialogMessagesRequest) (*GetDialogMessagesResponse, error)
	Ping(context.Context, *Void) (*Pong, error)
	mustEmbedUnimplementedDialogServiceServer()
}

// UnimplementedDialogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDialogServiceServer struct {
}

func (UnimplementedDialogServiceServer) CreateDialogWith(context.Context, *UserID) (*Dialog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDialogWith not implemented")
}
func (UnimplementedDialogServiceServer) GetDialogs(context.Context, *GetDialogsRequest) (*GetDialogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogs not implemented")
}
func (UnimplementedDialogServiceServer) CreateDialogMessage(context.Context, *CreateDialogMessageRequest) (*CreateDialogMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDialogMessage not implemented")
}
func (UnimplementedDialogServiceServer) GetDialogMessages(context.Context, *GetDialogMessagesRequest) (*GetDialogMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDialogMessages not implemented")
}
func (UnimplementedDialogServiceServer) Ping(context.Context, *Void) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDialogServiceServer) mustEmbedUnimplementedDialogServiceServer() {}

// UnsafeDialogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DialogServiceServer will
// result in compilation errors.
type UnsafeDialogServiceServer interface {
	mustEmbedUnimplementedDialogServiceServer()
}

func RegisterDialogServiceServer(s grpc.ServiceRegistrar, srv DialogServiceServer) {
	s.RegisterService(&DialogService_ServiceDesc, srv)
}

func _DialogService_CreateDialogWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).CreateDialogWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DialogService/CreateDialogWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).CreateDialogWith(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_GetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DialogService/GetDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetDialogs(ctx, req.(*GetDialogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_CreateDialogMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDialogMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).CreateDialogMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DialogService/CreateDialogMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).CreateDialogMessage(ctx, req.(*CreateDialogMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_GetDialogMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDialogMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).GetDialogMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DialogService/GetDialogMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).GetDialogMessages(ctx, req.(*GetDialogMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DialogService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DialogServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DialogService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DialogServiceServer).Ping(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// DialogService_ServiceDesc is the grpc.ServiceDesc for DialogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DialogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DialogService",
	HandlerType: (*DialogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDialogWith",
			Handler:    _DialogService_CreateDialogWith_Handler,
		},
		{
			MethodName: "GetDialogs",
			Handler:    _DialogService_GetDialogs_Handler,
		},
		{
			MethodName: "CreateDialogMessage",
			Handler:    _DialogService_CreateDialogMessage_Handler,
		},
		{
			MethodName: "GetDialogMessages",
			Handler:    _DialogService_GetDialogMessages_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DialogService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dialog.proto",
}
