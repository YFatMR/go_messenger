// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sandbox.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SandboxClient is the client API for Sandbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SandboxClient interface {
	GetProgramByID(ctx context.Context, in *ProgramID, opts ...grpc.CallOption) (*Program, error)
	CreateProgram(ctx context.Context, in *CreateProgramRequest, opts ...grpc.CallOption) (*ProgramID, error)
	UpdateProgramSource(ctx context.Context, in *UpdateProgramSourceRequest, opts ...grpc.CallOption) (*Void, error)
	RunProgram(ctx context.Context, in *ProgramID, opts ...grpc.CallOption) (*Void, error)
	LintProgram(ctx context.Context, in *ProgramID, opts ...grpc.CallOption) (*Void, error)
	Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Pong, error)
}

type sandboxClient struct {
	cc grpc.ClientConnInterface
}

func NewSandboxClient(cc grpc.ClientConnInterface) SandboxClient {
	return &sandboxClient{cc}
}

func (c *sandboxClient) GetProgramByID(ctx context.Context, in *ProgramID, opts ...grpc.CallOption) (*Program, error) {
	out := new(Program)
	err := c.cc.Invoke(ctx, "/proto.Sandbox/GetProgramByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) CreateProgram(ctx context.Context, in *CreateProgramRequest, opts ...grpc.CallOption) (*ProgramID, error) {
	out := new(ProgramID)
	err := c.cc.Invoke(ctx, "/proto.Sandbox/CreateProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) UpdateProgramSource(ctx context.Context, in *UpdateProgramSourceRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.Sandbox/UpdateProgramSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) RunProgram(ctx context.Context, in *ProgramID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.Sandbox/RunProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) LintProgram(ctx context.Context, in *ProgramID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.Sandbox/LintProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/proto.Sandbox/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxServer is the server API for Sandbox service.
// All implementations must embed UnimplementedSandboxServer
// for forward compatibility
type SandboxServer interface {
	GetProgramByID(context.Context, *ProgramID) (*Program, error)
	CreateProgram(context.Context, *CreateProgramRequest) (*ProgramID, error)
	UpdateProgramSource(context.Context, *UpdateProgramSourceRequest) (*Void, error)
	RunProgram(context.Context, *ProgramID) (*Void, error)
	LintProgram(context.Context, *ProgramID) (*Void, error)
	Ping(context.Context, *Void) (*Pong, error)
	mustEmbedUnimplementedSandboxServer()
}

// UnimplementedSandboxServer must be embedded to have forward compatible implementations.
type UnimplementedSandboxServer struct {
}

func (UnimplementedSandboxServer) GetProgramByID(context.Context, *ProgramID) (*Program, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgramByID not implemented")
}
func (UnimplementedSandboxServer) CreateProgram(context.Context, *CreateProgramRequest) (*ProgramID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (UnimplementedSandboxServer) UpdateProgramSource(context.Context, *UpdateProgramSourceRequest) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProgramSource not implemented")
}
func (UnimplementedSandboxServer) RunProgram(context.Context, *ProgramID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunProgram not implemented")
}
func (UnimplementedSandboxServer) LintProgram(context.Context, *ProgramID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LintProgram not implemented")
}
func (UnimplementedSandboxServer) Ping(context.Context, *Void) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSandboxServer) mustEmbedUnimplementedSandboxServer() {}

// UnsafeSandboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandboxServer will
// result in compilation errors.
type UnsafeSandboxServer interface {
	mustEmbedUnimplementedSandboxServer()
}

func RegisterSandboxServer(s grpc.ServiceRegistrar, srv SandboxServer) {
	s.RegisterService(&Sandbox_ServiceDesc, srv)
}

func _Sandbox_GetProgramByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgramID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).GetProgramByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sandbox/GetProgramByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).GetProgramByID(ctx, req.(*ProgramID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sandbox/CreateProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).CreateProgram(ctx, req.(*CreateProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_UpdateProgramSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProgramSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).UpdateProgramSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sandbox/UpdateProgramSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).UpdateProgramSource(ctx, req.(*UpdateProgramSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_RunProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgramID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).RunProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sandbox/RunProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).RunProgram(ctx, req.(*ProgramID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_LintProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgramID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).LintProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sandbox/LintProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).LintProgram(ctx, req.(*ProgramID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Sandbox/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).Ping(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Sandbox_ServiceDesc is the grpc.ServiceDesc for Sandbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sandbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Sandbox",
	HandlerType: (*SandboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProgramByID",
			Handler:    _Sandbox_GetProgramByID_Handler,
		},
		{
			MethodName: "CreateProgram",
			Handler:    _Sandbox_CreateProgram_Handler,
		},
		{
			MethodName: "UpdateProgramSource",
			Handler:    _Sandbox_UpdateProgramSource_Handler,
		},
		{
			MethodName: "RunProgram",
			Handler:    _Sandbox_RunProgram_Handler,
		},
		{
			MethodName: "LintProgram",
			Handler:    _Sandbox_LintProgram_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Sandbox_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sandbox.proto",
}
