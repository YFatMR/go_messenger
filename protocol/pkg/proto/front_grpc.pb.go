// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: front.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontClient is the client API for Front service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserID, error)
	GetToken(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Token, error)
	GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserData, error)
	Execute(ctx context.Context, in *Program, opts ...grpc.CallOption) (*ProgramResult, error)
	Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Pong, error)
}

type frontClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontClient(cc grpc.ClientConnInterface) FrontClient {
	return &frontClient{cc}
}

func (c *frontClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserID, error) {
	out := new(UserID)
	err := c.cc.Invoke(ctx, "/proto.Front/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontClient) GetToken(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/proto.Front/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontClient) GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*UserData, error) {
	out := new(UserData)
	err := c.cc.Invoke(ctx, "/proto.Front/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontClient) Execute(ctx context.Context, in *Program, opts ...grpc.CallOption) (*ProgramResult, error) {
	out := new(ProgramResult)
	err := c.cc.Invoke(ctx, "/proto.Front/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontClient) Ping(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/proto.Front/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontServer is the server API for Front service.
// All implementations must embed UnimplementedFrontServer
// for forward compatibility
type FrontServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*UserID, error)
	GetToken(context.Context, *Credential) (*Token, error)
	GetUserByID(context.Context, *UserID) (*UserData, error)
	Execute(context.Context, *Program) (*ProgramResult, error)
	Ping(context.Context, *Void) (*Pong, error)
	mustEmbedUnimplementedFrontServer()
}

// UnimplementedFrontServer must be embedded to have forward compatible implementations.
type UnimplementedFrontServer struct {
}

func (UnimplementedFrontServer) CreateUser(context.Context, *CreateUserRequest) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedFrontServer) GetToken(context.Context, *Credential) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedFrontServer) GetUserByID(context.Context, *UserID) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedFrontServer) Execute(context.Context, *Program) (*ProgramResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedFrontServer) Ping(context.Context, *Void) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFrontServer) mustEmbedUnimplementedFrontServer() {}

// UnsafeFrontServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontServer will
// result in compilation errors.
type UnsafeFrontServer interface {
	mustEmbedUnimplementedFrontServer()
}

func RegisterFrontServer(s grpc.ServiceRegistrar, srv FrontServer) {
	s.RegisterService(&Front_ServiceDesc, srv)
}

func _Front_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Front/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Front_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Front/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontServer).GetToken(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Front_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Front/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontServer).GetUserByID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Front_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Program)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Front/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontServer).Execute(ctx, req.(*Program))
	}
	return interceptor(ctx, in, info, handler)
}

func _Front_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Front/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontServer).Ping(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Front_ServiceDesc is the grpc.ServiceDesc for Front service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Front_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Front",
	HandlerType: (*FrontServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Front_CreateUser_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Front_GetToken_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _Front_GetUserByID_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Front_Execute_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Front_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "front.proto",
}
