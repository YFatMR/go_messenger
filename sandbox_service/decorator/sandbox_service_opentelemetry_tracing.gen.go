// Code generated by gowrap. DO NOT EDIT.
// template: ../../core/pkg/decorators/templates/opentelemetry_tracing.template.go
// gowrap: http://github.com/hexdigest/gowrap

package decorator

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/sandbox_service/apientity -i SandboxService -t ../../core/pkg/decorators/templates/opentelemetry_tracing.template.go -o sandbox_service_opentelemetry_tracing.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/sandbox_service/apientity"
	"github.com/YFatMR/go_messenger/sandbox_service/entity"
	"go.opentelemetry.io/otel/trace"
)

// OpentelemetryTracingSandboxServiceDecorator implements apientity.SandboxService that is instrumented with custom zap logger
type OpentelemetryTracingSandboxServiceDecorator struct {
	base         apientity.SandboxService
	tracer       trace.Tracer
	recordErrors bool
}

// NewOpentelemetryTracingSandboxServiceDecorator instruments an implementation of the apientity.SandboxService with simple logging
func NewOpentelemetryTracingSandboxServiceDecorator(base apientity.SandboxService, tracer trace.Tracer, recordErrors bool) *OpentelemetryTracingSandboxServiceDecorator {
	if base == nil {
		panic("OpentelemetryTracingSandboxServiceDecorator got empty base")
	}
	if tracer == nil {
		panic("OpentelemetryTracingSandboxServiceDecorator got empty tracer")
	}
	return &OpentelemetryTracingSandboxServiceDecorator{
		base:         base,
		tracer:       tracer,
		recordErrors: recordErrors,
	}
}

// CreateProgram implements apientity.SandboxService
func (d *OpentelemetryTracingSandboxServiceDecorator) CreateProgram(ctx context.Context, programSource *entity.ProgramSource) (programID *entity.ProgramID, err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/CreateProgram")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.CreateProgram(ctx, programSource)
}

// GetProgramByID implements apientity.SandboxService
func (d *OpentelemetryTracingSandboxServiceDecorator) GetProgramByID(ctx context.Context, programID *entity.ProgramID) (program *entity.Program, err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/GetProgramByID")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.GetProgramByID(ctx, programID)
}

// RunProgram implements apientity.SandboxService
func (d *OpentelemetryTracingSandboxServiceDecorator) RunProgram(ctx context.Context, programID *entity.ProgramID, userID *entity.UserID) (err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/RunProgram")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.RunProgram(ctx, programID, userID)
}

// UpdateProgramSource implements apientity.SandboxService
func (d *OpentelemetryTracingSandboxServiceDecorator) UpdateProgramSource(ctx context.Context, programID *entity.ProgramID, programSource *entity.ProgramSource) (err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/UpdateProgramSource")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.UpdateProgramSource(ctx, programID, programSource)
}
