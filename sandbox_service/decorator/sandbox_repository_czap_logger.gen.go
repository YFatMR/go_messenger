// Code generated by gowrap. DO NOT EDIT.
// template: ../../core/pkg/decorators/templates/czap_logger.template.go
// gowrap: http://github.com/hexdigest/gowrap

package decorator

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/sandbox_service/apientity -i SandboxRepository -t ../../core/pkg/decorators/templates/czap_logger.template.go -o sandbox_repository_czap_logger.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/czap"
	"github.com/YFatMR/go_messenger/sandbox_service/apientity"
	"github.com/YFatMR/go_messenger/sandbox_service/entity"
	"go.uber.org/zap"
)

// LoggingSandboxRepositoryDecorator implements apientity.SandboxRepository that is instrumented with custom zap logger
type LoggingSandboxRepositoryDecorator struct {
	logger *czap.Logger
	base   apientity.SandboxRepository
}

// NewLoggingSandboxRepositoryDecorator instruments an implementation of the apientity.SandboxRepository with simple logging
func NewLoggingSandboxRepositoryDecorator(base apientity.SandboxRepository, logger *czap.Logger) *LoggingSandboxRepositoryDecorator {
	if base == nil {
		panic("LoggingSandboxRepositoryDecorator got empty base")
	}
	if logger == nil {
		panic("LoggingSandboxRepositoryDecorator got empty logger")
	}
	return &LoggingSandboxRepositoryDecorator{
		base:   base,
		logger: logger,
	}
}

// CreateProgram implements apientity.SandboxRepository
func (d *LoggingSandboxRepositoryDecorator) CreateProgram(ctx context.Context, program *entity.ProgramSource) (programID *entity.ProgramID, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: calling CreateProgram")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: CreateProgram finished")
	}()
	return d.base.CreateProgram(ctx, program)
}

// GetProgramByID implements apientity.SandboxRepository
func (d *LoggingSandboxRepositoryDecorator) GetProgramByID(ctx context.Context, programID *entity.ProgramID) (program *entity.Program, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: calling GetProgramByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: GetProgramByID finished")
	}()
	return d.base.GetProgramByID(ctx, programID)
}

// UpdateCodeRunnerOutput implements apientity.SandboxRepository
func (d *LoggingSandboxRepositoryDecorator) UpdateCodeRunnerOutput(ctx context.Context, programID *entity.ProgramID, newOutput *entity.ProgramOutput) (err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: calling UpdateCodeRunnerOutput")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: UpdateCodeRunnerOutput finished")
	}()
	return d.base.UpdateCodeRunnerOutput(ctx, programID, newOutput)
}

// UpdateLinterOutput implements apientity.SandboxRepository
func (d *LoggingSandboxRepositoryDecorator) UpdateLinterOutput(ctx context.Context, programID *entity.ProgramID, newOutput *entity.ProgramOutput) (err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: calling UpdateLinterOutput")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: UpdateLinterOutput finished")
	}()
	return d.base.UpdateLinterOutput(ctx, programID, newOutput)
}

// UpdateProgramSource implements apientity.SandboxRepository
func (d *LoggingSandboxRepositoryDecorator) UpdateProgramSource(ctx context.Context, programID *entity.ProgramID, programSource *entity.ProgramSource) (err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: calling UpdateProgramSource")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxRepositoryDecorator: UpdateProgramSource finished")
	}()
	return d.base.UpdateProgramSource(ctx, programID, programSource)
}
