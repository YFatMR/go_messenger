// Code generated by gowrap. DO NOT EDIT.
// template: ../../../core/pkg/decorators/templates/czap_logger.template.go
// gowrap: http://github.com/hexdigest/gowrap

package controllerdecorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/sandbox_service/apientity -i SandboxController -t ../../../core/pkg/decorators/templates/czap_logger.template.go -o czap_logger.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/czap"
	"github.com/YFatMR/go_messenger/protocol/pkg/proto"
	"github.com/YFatMR/go_messenger/sandbox_service/apientity"
	"go.uber.org/zap"
)

// LoggingSandboxControllerDecorator implements apientity.SandboxController that is instrumented with custom zap logger
type LoggingSandboxControllerDecorator struct {
	logger *czap.Logger
	base   apientity.SandboxController
}

// NewLoggingSandboxControllerDecorator instruments an implementation of the apientity.SandboxController with simple logging
func NewLoggingSandboxControllerDecorator(base apientity.SandboxController, logger *czap.Logger) *LoggingSandboxControllerDecorator {
	if base == nil {
		panic("LoggingSandboxControllerDecorator got empty base")
	}
	if logger == nil {
		panic("LoggingSandboxControllerDecorator got empty logger")
	}
	return &LoggingSandboxControllerDecorator{
		base:   base,
		logger: logger,
	}
}

// CreateProgram implements apientity.SandboxController
func (d *LoggingSandboxControllerDecorator) CreateProgram(ctx context.Context, pp1 *proto.ProgramSource) (programID *proto.ProgramID, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: calling CreateProgram")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: CreateProgram finished")
	}()
	return d.base.CreateProgram(ctx, pp1)
}

// GetProgramByID implements apientity.SandboxController
func (d *LoggingSandboxControllerDecorator) GetProgramByID(ctx context.Context, request *proto.ProgramID) (program *proto.Program, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: calling GetProgramByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: GetProgramByID finished")
	}()
	return d.base.GetProgramByID(ctx, request)
}

// LintProgram implements apientity.SandboxController
func (d *LoggingSandboxControllerDecorator) LintProgram(ctx context.Context, request *proto.ProgramID) (void *proto.Void, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: calling LintProgram")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: LintProgram finished")
	}()
	return d.base.LintProgram(ctx, request)
}

// Ping implements apientity.SandboxController
func (d *LoggingSandboxControllerDecorator) Ping(ctx context.Context, request *proto.Void) (pong *proto.Pong, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: calling Ping")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: Ping finished")
	}()
	return d.base.Ping(ctx, request)
}

// RunProgram implements apientity.SandboxController
func (d *LoggingSandboxControllerDecorator) RunProgram(ctx context.Context, request *proto.ProgramID) (void *proto.Void, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: calling RunProgram")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: RunProgram finished")
	}()
	return d.base.RunProgram(ctx, request)
}

// UpdateProgramSource implements apientity.SandboxController
func (d *LoggingSandboxControllerDecorator) UpdateProgramSource(ctx context.Context, request *proto.UpdateProgramSourceRequest) (void *proto.Void, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: calling UpdateProgramSource")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxControllerDecorator: UpdateProgramSource finished")
	}()
	return d.base.UpdateProgramSource(ctx, request)
}
