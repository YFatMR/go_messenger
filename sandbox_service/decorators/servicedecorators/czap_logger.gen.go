// Code generated by gowrap. DO NOT EDIT.
// template: ../../../core/pkg/decorators/templates/czap_logger.template.go
// gowrap: http://github.com/hexdigest/gowrap

package servicedecorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/sandbox_service/apientity -i SandboxService -t ../../../core/pkg/decorators/templates/czap_logger.template.go -o czap_logger.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/czap"
	"github.com/YFatMR/go_messenger/sandbox_service/apientity"
	"github.com/YFatMR/go_messenger/sandbox_service/entity"
	"go.uber.org/zap"
)

// LoggingSandboxServiceDecorator implements apientity.SandboxService that is instrumented with custom zap logger
type LoggingSandboxServiceDecorator struct {
	logger *czap.Logger
	base   apientity.SandboxService
}

// NewLoggingSandboxServiceDecorator instruments an implementation of the apientity.SandboxService with simple logging
func NewLoggingSandboxServiceDecorator(base apientity.SandboxService, logger *czap.Logger) *LoggingSandboxServiceDecorator {
	if base == nil {
		panic("LoggingSandboxServiceDecorator got empty base")
	}
	if logger == nil {
		panic("LoggingSandboxServiceDecorator got empty logger")
	}
	return &LoggingSandboxServiceDecorator{
		base:   base,
		logger: logger,
	}
}

// CreateProgram implements apientity.SandboxService
func (d *LoggingSandboxServiceDecorator) CreateProgram(ctx context.Context, programSource *entity.ProgramSource) (programID *entity.ProgramID, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxServiceDecorator: calling CreateProgram")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxServiceDecorator: CreateProgram finished")
	}()
	return d.base.CreateProgram(ctx, programSource)
}

// GetProgramByID implements apientity.SandboxService
func (d *LoggingSandboxServiceDecorator) GetProgramByID(ctx context.Context, programID *entity.ProgramID) (program *entity.Program, err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxServiceDecorator: calling GetProgramByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxServiceDecorator: GetProgramByID finished")
	}()
	return d.base.GetProgramByID(ctx, programID)
}

// RunProgram implements apientity.SandboxService
func (d *LoggingSandboxServiceDecorator) RunProgram(ctx context.Context, programID *entity.ProgramID, userID *entity.UserID) (err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxServiceDecorator: calling RunProgram")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxServiceDecorator: RunProgram finished")
	}()
	return d.base.RunProgram(ctx, programID, userID)
}

// UpdateProgramSource implements apientity.SandboxService
func (d *LoggingSandboxServiceDecorator) UpdateProgramSource(ctx context.Context, programID *entity.ProgramID, programSource *entity.ProgramSource) (err error) {

	d.logger.InfoContext(ctx, "LoggingSandboxServiceDecorator: calling UpdateProgramSource")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingSandboxServiceDecorator: UpdateProgramSource finished")
	}()
	return d.base.UpdateProgramSource(ctx, programID, programSource)
}
