// Code generated by gowrap. DO NOT EDIT.
// template: ../../core/pkg/decorators/templates/czap_logger.template.go
// gowrap: http://github.com/hexdigest/gowrap

package decorator

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/dialog_service/apientity -i DialogController -t ../../core/pkg/decorators/templates/czap_logger.template.go -o dialog_controller_czap_logger.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/czap"
	"github.com/YFatMR/go_messenger/dialog_service/apientity"
	"github.com/YFatMR/go_messenger/protocol/pkg/proto"
	"go.uber.org/zap"
)

// LoggingDialogControllerDecorator implements apientity.DialogController that is instrumented with custom zap logger
type LoggingDialogControllerDecorator struct {
	logger *czap.Logger
	base   apientity.DialogController
}

// NewLoggingDialogControllerDecorator instruments an implementation of the apientity.DialogController with simple logging
func NewLoggingDialogControllerDecorator(base apientity.DialogController, logger *czap.Logger) *LoggingDialogControllerDecorator {
	if base == nil {
		panic("LoggingDialogControllerDecorator got empty base")
	}
	if logger == nil {
		panic("LoggingDialogControllerDecorator got empty logger")
	}
	return &LoggingDialogControllerDecorator{
		base:   base,
		logger: logger,
	}
}

// CreateDialogMessage implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) CreateDialogMessage(ctx context.Context, request *proto.CreateDialogMessageRequest) (response *proto.CreateDialogMessageResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling CreateDialogMessage")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: CreateDialogMessage finished")
	}()
	return d.base.CreateDialogMessage(ctx, request)
}

// CreateDialogMessageWithCode implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) CreateDialogMessageWithCode(ctx context.Context, request *proto.CreateDialogMessageWithCodeRequest) (cp1 *proto.CreateDialogMessageResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling CreateDialogMessageWithCode")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: CreateDialogMessageWithCode finished")
	}()
	return d.base.CreateDialogMessageWithCode(ctx, request)
}

// CreateDialogWith implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) CreateDialogWith(ctx context.Context, request *proto.UserID) (response *proto.Dialog, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling CreateDialogWith")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: CreateDialogWith finished")
	}()
	return d.base.CreateDialogWith(ctx, request)
}

// CreateInstruction implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) CreateInstruction(ctx context.Context, request *proto.CreateInstructionRequest) (response *proto.InstructionID, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling CreateInstruction")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: CreateInstruction finished")
	}()
	return d.base.CreateInstruction(ctx, request)
}

// GetDialogByID implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) GetDialogByID(ctx context.Context, dialogID *proto.DialogID) (response *proto.Dialog, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling GetDialogByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: GetDialogByID finished")
	}()
	return d.base.GetDialogByID(ctx, dialogID)
}

// GetDialogLinks implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) GetDialogLinks(ctx context.Context, request *proto.GetDialogLinksRequest) (response *proto.GetDialogLinksResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling GetDialogLinks")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: GetDialogLinks finished")
	}()
	return d.base.GetDialogLinks(ctx, request)
}

// GetDialogLinksByID implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) GetDialogLinksByID(ctx context.Context, request *proto.GetDialogLinksByIDRequest) (response *proto.GetDialogLinksResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling GetDialogLinksByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: GetDialogLinksByID finished")
	}()
	return d.base.GetDialogLinksByID(ctx, request)
}

// GetDialogMembers implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) GetDialogMembers(ctx context.Context, dp1 *proto.DialogID) (response *proto.GetDialogMembersResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling GetDialogMembers")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: GetDialogMembers finished")
	}()
	return d.base.GetDialogMembers(ctx, dp1)
}

// GetDialogMessages implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) GetDialogMessages(ctx context.Context, request *proto.GetDialogMessagesRequest) (response *proto.GetDialogMessagesResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling GetDialogMessages")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: GetDialogMessages finished")
	}()
	return d.base.GetDialogMessages(ctx, request)
}

// GetDialogs implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) GetDialogs(ctx context.Context, request *proto.GetDialogsRequest) (response *proto.GetDialogsResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling GetDialogs")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: GetDialogs finished")
	}()
	return d.base.GetDialogs(ctx, request)
}

// GetInstructions implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) GetInstructions(ctx context.Context, request *proto.GetInstructionsRequest) (response *proto.GetInstructionsResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling GetInstructions")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: GetInstructions finished")
	}()
	return d.base.GetInstructions(ctx, request)
}

// GetInstructionsByID implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) GetInstructionsByID(ctx context.Context, request *proto.GetInstructionsByIDRequest) (response *proto.GetInstructionsResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling GetInstructionsByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: GetInstructionsByID finished")
	}()
	return d.base.GetInstructionsByID(ctx, request)
}

// GetUnreadDialogMessagesCount implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) GetUnreadDialogMessagesCount(ctx context.Context, request *proto.DialogID) (response *proto.GetUnreadDialogMessagesCountResponse, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling GetUnreadDialogMessagesCount")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: GetUnreadDialogMessagesCount finished")
	}()
	return d.base.GetUnreadDialogMessagesCount(ctx, request)
}

// Ping implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) Ping(ctx context.Context, request *proto.Void) (pong *proto.Pong, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling Ping")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: Ping finished")
	}()
	return d.base.Ping(ctx, request)
}

// ReadMessage implements apientity.DialogController
func (d *LoggingDialogControllerDecorator) ReadMessage(ctx context.Context, request *proto.ReadMessageRequest) (void *proto.Void, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: calling ReadMessage")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogControllerDecorator: ReadMessage finished")
	}()
	return d.base.ReadMessage(ctx, request)
}
