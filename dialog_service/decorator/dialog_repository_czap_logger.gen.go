// Code generated by gowrap. DO NOT EDIT.
// template: ../../core/pkg/decorators/templates/czap_logger.template.go
// gowrap: http://github.com/hexdigest/gowrap

package decorator

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/dialog_service/apientity -i DialogRepository -t ../../core/pkg/decorators/templates/czap_logger.template.go -o dialog_repository_czap_logger.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/czap"
	"github.com/YFatMR/go_messenger/dialog_service/apientity"
	"github.com/YFatMR/go_messenger/dialog_service/entity"
	"go.uber.org/zap"
)

// LoggingDialogRepositoryDecorator implements apientity.DialogRepository that is instrumented with custom zap logger
type LoggingDialogRepositoryDecorator struct {
	logger *czap.Logger
	base   apientity.DialogRepository
}

// NewLoggingDialogRepositoryDecorator instruments an implementation of the apientity.DialogRepository with simple logging
func NewLoggingDialogRepositoryDecorator(base apientity.DialogRepository, logger *czap.Logger) *LoggingDialogRepositoryDecorator {
	if base == nil {
		panic("LoggingDialogRepositoryDecorator got empty base")
	}
	if logger == nil {
		panic("LoggingDialogRepositoryDecorator got empty logger")
	}
	return &LoggingDialogRepositoryDecorator{
		base:   base,
		logger: logger,
	}
}

// CreateDialog implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) CreateDialog(ctx context.Context, userID1 *entity.UserID, userData1 *entity.UserData, userID2 *entity.UserID, userData2 *entity.UserData) (dialog *entity.Dialog, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling CreateDialog")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: CreateDialog finished")
	}()
	return d.base.CreateDialog(ctx, userID1, userData1, userID2, userData2)
}

// CreateDialogMessageWithCode implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) CreateDialogMessageWithCode(ctx context.Context, request *entity.CreateDialogMessageWithCodeRequest) (dp1 *entity.DialogMessage, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling CreateDialogMessageWithCode")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: CreateDialogMessageWithCode finished")
	}()
	return d.base.CreateDialogMessageWithCode(ctx, request)
}

// CreateDialogMessageWithURLs implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) CreateDialogMessageWithURLs(ctx context.Context, request *entity.CreateDialogMessageRequest, urls []string) (dp1 *entity.DialogMessage, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling CreateDialogMessageWithURLs")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: CreateDialogMessageWithURLs finished")
	}()
	return d.base.CreateDialogMessageWithURLs(ctx, request, urls)
}

// CreateInstruction implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) CreateInstruction(ctx context.Context, creatorID *entity.UserID, dialogID *entity.DialogID, instructionTitle string, instructionText string) (instructionID *entity.InstructionID, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling CreateInstruction")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: CreateInstruction finished")
	}()
	return d.base.CreateInstruction(ctx, creatorID, dialogID, instructionTitle, instructionText)
}

// GetDialog implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialog(ctx context.Context, userID *entity.UserID, dialogID *entity.DialogID) (dialog *entity.Dialog, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialog")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialog finished")
	}()
	return d.base.GetDialog(ctx, userID, dialogID)
}

// GetDialogIdByMembers implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialogIdByMembers(ctx context.Context, userID1 *entity.UserID, userID2 *entity.UserID) (dialog *entity.DialogID, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialogIdByMembers")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialogIdByMembers finished")
	}()
	return d.base.GetDialogIdByMembers(ctx, userID1, userID2)
}

// GetDialogMembers implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialogMembers(ctx context.Context, dialogID *entity.DialogID) (userIDs []*entity.UserID, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialogMembers")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialogMembers finished")
	}()
	return d.base.GetDialogMembers(ctx, dialogID)
}

// GetDialogMessageByID implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialogMessageByID(ctx context.Context, dialogID *entity.DialogID, messageID *entity.MessageID) (message *entity.DialogMessage, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialogMessageByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialogMessageByID finished")
	}()
	return d.base.GetDialogMessageByID(ctx, dialogID, messageID)
}

// GetDialogMessagesAfter implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialogMessagesAfter(ctx context.Context, dialogID *entity.DialogID, messageID *entity.MessageID, limit uint64) (messages []*entity.DialogMessage, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialogMessagesAfter")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialogMessagesAfter finished")
	}()
	return d.base.GetDialogMessagesAfter(ctx, dialogID, messageID, limit)
}

// GetDialogMessagesAfterAndInclude implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialogMessagesAfterAndInclude(ctx context.Context, dialogID *entity.DialogID, messageID *entity.MessageID, limit uint64) (messages []*entity.DialogMessage, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialogMessagesAfterAndInclude")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialogMessagesAfterAndInclude finished")
	}()
	return d.base.GetDialogMessagesAfterAndInclude(ctx, dialogID, messageID, limit)
}

// GetDialogMessagesBefore implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialogMessagesBefore(ctx context.Context, dialogID *entity.DialogID, messageID *entity.MessageID, limit uint64) (messages []*entity.DialogMessage, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialogMessagesBefore")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialogMessagesBefore finished")
	}()
	return d.base.GetDialogMessagesBefore(ctx, dialogID, messageID, limit)
}

// GetDialogMessagesBeforeAndInclude implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialogMessagesBeforeAndInclude(ctx context.Context, dialogID *entity.DialogID, messageID *entity.MessageID, limit uint64) (messages []*entity.DialogMessage, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialogMessagesBeforeAndInclude")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialogMessagesBeforeAndInclude finished")
	}()
	return d.base.GetDialogMessagesBeforeAndInclude(ctx, dialogID, messageID, limit)
}

// GetDialogMessagesByID implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialogMessagesByID(ctx context.Context, dialogID *entity.DialogID, messagesID []*entity.MessageID) (messages []*entity.DialogMessage, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialogMessagesByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialogMessagesByID finished")
	}()
	return d.base.GetDialogMessagesByID(ctx, dialogID, messagesID)
}

// GetDialogs implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetDialogs(ctx context.Context, userID *entity.UserID, offset uint64, limit uint64) (dialogs []*entity.Dialog, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetDialogs")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetDialogs finished")
	}()
	return d.base.GetDialogs(ctx, userID, offset, limit)
}

// GetInstructions implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetInstructions(ctx context.Context, dialogID *entity.DialogID, limit uint64) (instructions []*entity.Instruction, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetInstructions")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetInstructions finished")
	}()
	return d.base.GetInstructions(ctx, dialogID, limit)
}

// GetInstructionsBefore implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetInstructionsBefore(ctx context.Context, dialogID *entity.DialogID, instructionID *entity.InstructionID, limit uint64) (instructions []*entity.Instruction, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetInstructionsBefore")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetInstructionsBefore finished")
	}()
	return d.base.GetInstructionsBefore(ctx, dialogID, instructionID, limit)
}

// GetLinks implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetLinks(ctx context.Context, dialogID *entity.DialogID, limit uint64) (links []*entity.Link, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetLinks")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetLinks finished")
	}()
	return d.base.GetLinks(ctx, dialogID, limit)
}

// GetLinksBefore implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetLinksBefore(ctx context.Context, dialogID *entity.DialogID, linkID *entity.LinkID, limit uint64) (links []*entity.Link, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetLinksBefore")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetLinksBefore finished")
	}()
	return d.base.GetLinksBefore(ctx, dialogID, linkID, limit)
}

// GetUnreadDialogMessagesCount implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) GetUnreadDialogMessagesCount(ctx context.Context, selfID *entity.UserID, dialogID *entity.DialogID) (count uint64, err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling GetUnreadDialogMessagesCount")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: GetUnreadDialogMessagesCount finished")
	}()
	return d.base.GetUnreadDialogMessagesCount(ctx, selfID, dialogID)
}

// ReadMessage implements apientity.DialogRepository
func (d *LoggingDialogRepositoryDecorator) ReadMessage(ctx context.Context, userID *entity.UserID, dialogID *entity.DialogID, messageID *entity.MessageID) (err error) {

	d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: calling ReadMessage")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingDialogRepositoryDecorator: ReadMessage finished")
	}()
	return d.base.ReadMessage(ctx, userID, dialogID, messageID)
}
