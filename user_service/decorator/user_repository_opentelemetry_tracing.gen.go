// Code generated by gowrap. DO NOT EDIT.
// template: ../../core/pkg/decorators/templates/opentelemetry_tracing.template.go
// gowrap: http://github.com/hexdigest/gowrap

package decorator

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/apientity -i UserRepository -t ../../core/pkg/decorators/templates/opentelemetry_tracing.template.go -o user_repository_opentelemetry_tracing.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/user_service/apientity"
	"github.com/YFatMR/go_messenger/user_service/entity"
	"go.opentelemetry.io/otel/trace"
)

// OpentelemetryTracingUserRepositoryDecorator implements apientity.UserRepository that is instrumented with custom zap logger
type OpentelemetryTracingUserRepositoryDecorator struct {
	base         apientity.UserRepository
	tracer       trace.Tracer
	recordErrors bool
}

// NewOpentelemetryTracingUserRepositoryDecorator instruments an implementation of the apientity.UserRepository with simple logging
func NewOpentelemetryTracingUserRepositoryDecorator(base apientity.UserRepository, tracer trace.Tracer, recordErrors bool) *OpentelemetryTracingUserRepositoryDecorator {
	if base == nil {
		panic("OpentelemetryTracingUserRepositoryDecorator got empty base")
	}
	if tracer == nil {
		panic("OpentelemetryTracingUserRepositoryDecorator got empty tracer")
	}
	return &OpentelemetryTracingUserRepositoryDecorator{
		base:         base,
		tracer:       tracer,
		recordErrors: recordErrors,
	}
}

// Create implements apientity.UserRepository
func (d *OpentelemetryTracingUserRepositoryDecorator) Create(ctx context.Context, user *entity.User, credential *entity.Credential) (userID *entity.UserID, err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/Create")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.Create(ctx, user, credential)
}

// DeleteByID implements apientity.UserRepository
func (d *OpentelemetryTracingUserRepositoryDecorator) DeleteByID(ctx context.Context, userID *entity.UserID) (err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/DeleteByID")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.DeleteByID(ctx, userID)
}

// GetAccountByEmail implements apientity.UserRepository
func (d *OpentelemetryTracingUserRepositoryDecorator) GetAccountByEmail(ctx context.Context, email string) (account *entity.Account, err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/GetAccountByEmail")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.GetAccountByEmail(ctx, email)
}

// GetByID implements apientity.UserRepository
func (d *OpentelemetryTracingUserRepositoryDecorator) GetByID(ctx context.Context, userID *entity.UserID) (user *entity.User, err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/GetByID")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.GetByID(ctx, userID)
}

// GetUsersByPrefix implements apientity.UserRepository
func (d *OpentelemetryTracingUserRepositoryDecorator) GetUsersByPrefix(ctx context.Context, selfID *entity.UserID, prefix string, limit uint64) (resp []*entity.UserWithID, err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/GetUsersByPrefix")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.GetUsersByPrefix(ctx, selfID, prefix, limit)
}

// UpdateUserData implements apientity.UserRepository
func (d *OpentelemetryTracingUserRepositoryDecorator) UpdateUserData(ctx context.Context, userID *entity.UserID, request *entity.UpdateUserRequest) (err error) {

	var span trace.Span
	ctx, span = d.tracer.Start(ctx, "/UpdateUserData")
	defer func() {
		if err != nil && d.recordErrors {
			span.RecordError(err)
		}
		span.End()
	}()
	return d.base.UpdateUserData(ctx, userID, request)
}
