// Code generated by gowrap. DO NOT EDIT.
// template: ../../core/pkg/decorators/templates/prometheus_metrics.template.go
// gowrap: http://github.com/hexdigest/gowrap

package decorator

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/apientity -i UserService -t ../../core/pkg/decorators/templates/prometheus_metrics.template.go -o user_service_prometheus_metrics.gen.go -v metricPrefix=service_request -v globalVarPrefix=private_UserService_ -l ""

import (
	"context"
	"time"

	"github.com/YFatMR/go_messenger/user_service/apientity"
	"github.com/YFatMR/go_messenger/user_service/entity"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

const (
	private_UserService_okStatusTag    = "ok"
	private_UserService_errorStatusTag = "error"
)

// Prefixes:
// database_query: for database
// service_request: for seervices

// Naming rule: https://prometheus.io/docs/practices/naming/
var (
	private_UserService_DurationSeconds = promauto.NewHistogramVec(prometheus.HistogramOpts{
		Name:    "service_request_duration_seconds",
		Buckets: []float64{0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 2, 4},
		Help:    "Duration of one database query",
	}, []string{"status", "operation"})
	private_UserService_ProcessedTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "service_request_processed_total",
		Help: "Count of query to database",
	}, []string{"status", "operation"})
	private_UserService_StartProcessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "service_request_start_process_total",
		Help: "Count of started queries",
	})
)

// PrometheusMetricsUserServiceDecorator implements apientity.UserService that is instrumented with custom zap logger
type PrometheusMetricsUserServiceDecorator struct {
	base apientity.UserService
}

// NewPrometheusMetricsUserServiceDecorator instruments an implementation of the apientity.UserService with simple logging
func NewPrometheusMetricsUserServiceDecorator(base apientity.UserService) *PrometheusMetricsUserServiceDecorator {
	if base == nil {
		panic("PrometheusMetricsUserServiceDecorator got empty base")
	}
	return &PrometheusMetricsUserServiceDecorator{
		base: base,
	}
}

// Create implements apientity.UserService
func (d *PrometheusMetricsUserServiceDecorator) Create(ctx context.Context, user *entity.User, unsafeCredential *entity.UnsafeCredential) (userID *entity.UserID, err error) {

	startTime := time.Now()
	private_UserService_StartProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := private_UserService_okStatusTag

		if err != nil {
			statusTag = private_UserService_errorStatusTag
		}

		private_UserService_DurationSeconds.WithLabelValues(statusTag, "create").Observe(functionDuration)
		private_UserService_ProcessedTotal.WithLabelValues(statusTag, "create").Inc()
	}()
	return d.base.Create(ctx, user, unsafeCredential)
}

// DeleteByID implements apientity.UserService
func (d *PrometheusMetricsUserServiceDecorator) DeleteByID(ctx context.Context, userID *entity.UserID) (err error) {

	startTime := time.Now()
	private_UserService_StartProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := private_UserService_okStatusTag

		if err != nil {
			statusTag = private_UserService_errorStatusTag
		}

		private_UserService_DurationSeconds.WithLabelValues(statusTag, "delete_by_id").Observe(functionDuration)
		private_UserService_ProcessedTotal.WithLabelValues(statusTag, "delete_by_id").Inc()
	}()
	return d.base.DeleteByID(ctx, userID)
}

// GenerateToken implements apientity.UserService
func (d *PrometheusMetricsUserServiceDecorator) GenerateToken(ctx context.Context, unsafeCredential *entity.UnsafeCredential) (token *entity.Token, err error) {

	startTime := time.Now()
	private_UserService_StartProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := private_UserService_okStatusTag

		if err != nil {
			statusTag = private_UserService_errorStatusTag
		}

		private_UserService_DurationSeconds.WithLabelValues(statusTag, "generate_token").Observe(functionDuration)
		private_UserService_ProcessedTotal.WithLabelValues(statusTag, "generate_token").Inc()
	}()
	return d.base.GenerateToken(ctx, unsafeCredential)
}

// GetByID implements apientity.UserService
func (d *PrometheusMetricsUserServiceDecorator) GetByID(ctx context.Context, userID *entity.UserID) (user *entity.User, err error) {

	startTime := time.Now()
	private_UserService_StartProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := private_UserService_okStatusTag

		if err != nil {
			statusTag = private_UserService_errorStatusTag
		}

		private_UserService_DurationSeconds.WithLabelValues(statusTag, "get_by_id").Observe(functionDuration)
		private_UserService_ProcessedTotal.WithLabelValues(statusTag, "get_by_id").Inc()
	}()
	return d.base.GetByID(ctx, userID)
}

// GetUsersByPrefix implements apientity.UserService
func (d *PrometheusMetricsUserServiceDecorator) GetUsersByPrefix(ctx context.Context, selfID *entity.UserID, prefix string, limit uint64) (usersData []*entity.UserWithID, err error) {

	startTime := time.Now()
	private_UserService_StartProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := private_UserService_okStatusTag

		if err != nil {
			statusTag = private_UserService_errorStatusTag
		}

		private_UserService_DurationSeconds.WithLabelValues(statusTag, "get_users_by_prefix").Observe(functionDuration)
		private_UserService_ProcessedTotal.WithLabelValues(statusTag, "get_users_by_prefix").Inc()
	}()
	return d.base.GetUsersByPrefix(ctx, selfID, prefix, limit)
}

// UpdateUserData implements apientity.UserService
func (d *PrometheusMetricsUserServiceDecorator) UpdateUserData(ctx context.Context, userID *entity.UserID, request *entity.UpdateUserRequest) (err error) {

	startTime := time.Now()
	private_UserService_StartProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := private_UserService_okStatusTag

		if err != nil {
			statusTag = private_UserService_errorStatusTag
		}

		private_UserService_DurationSeconds.WithLabelValues(statusTag, "update_user_data").Observe(functionDuration)
		private_UserService_ProcessedTotal.WithLabelValues(statusTag, "update_user_data").Inc()
	}()
	return d.base.UpdateUserData(ctx, userID, request)
}
