// Code generated by gowrap. DO NOT EDIT.
// template: ../../../core/pkg/decorators/templates/czap_logger.template.go
// gowrap: http://github.com/hexdigest/gowrap

package servicedecorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/services -i UserService -t ../../../core/pkg/decorators/templates/czap_logger.template.go -o czap_logger.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/czap"
	"github.com/YFatMR/go_messenger/user_service/entities/token"
	"github.com/YFatMR/go_messenger/user_service/entities/unsafecredential"
	"github.com/YFatMR/go_messenger/user_service/entities/user"
	"github.com/YFatMR/go_messenger/user_service/entities/userid"
	"github.com/YFatMR/go_messenger/user_service/services"
	"go.uber.org/zap"
)

// LoggingUserServiceDecorator implements services.UserService that is instrumented with custom zap logger
type LoggingUserServiceDecorator struct {
	logger *czap.Logger
	base   services.UserService
}

// NewLoggingUserServiceDecorator instruments an implementation of the services.UserService with simple logging
func NewLoggingUserServiceDecorator(base services.UserService, logger *czap.Logger) *LoggingUserServiceDecorator {
	if base == nil {
		panic("LoggingUserServiceDecorator got empty base")
	}
	if logger == nil {
		panic("LoggingUserServiceDecorator got empty logger")
	}
	return &LoggingUserServiceDecorator{
		base:   base,
		logger: logger,
	}
}

// Create implements services.UserService
func (d *LoggingUserServiceDecorator) Create(ctx context.Context, user *user.Entity, unsafeCredential *unsafecredential.Entity) (userID *userid.Entity, err error) {

	d.logger.InfoContext(ctx, "LoggingUserServiceDecorator: calling Create")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingUserServiceDecorator: Create finished")
	}()
	return d.base.Create(ctx, user, unsafeCredential)
}

// DeleteByID implements services.UserService
func (d *LoggingUserServiceDecorator) DeleteByID(ctx context.Context, userID *userid.Entity) (err error) {

	d.logger.InfoContext(ctx, "LoggingUserServiceDecorator: calling DeleteByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingUserServiceDecorator: DeleteByID finished")
	}()
	return d.base.DeleteByID(ctx, userID)
}

// GenerateToken implements services.UserService
func (d *LoggingUserServiceDecorator) GenerateToken(ctx context.Context, unsafeCredential *unsafecredential.Entity) (token *token.Entity, err error) {

	d.logger.InfoContext(ctx, "LoggingUserServiceDecorator: calling GenerateToken")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingUserServiceDecorator: GenerateToken finished")
	}()
	return d.base.GenerateToken(ctx, unsafeCredential)
}

// GetByID implements services.UserService
func (d *LoggingUserServiceDecorator) GetByID(ctx context.Context, userID *userid.Entity) (user *user.Entity, err error) {

	d.logger.InfoContext(ctx, "LoggingUserServiceDecorator: calling GetByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingUserServiceDecorator: GetByID finished")
	}()
	return d.base.GetByID(ctx, userID)
}
