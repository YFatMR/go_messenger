// Code generated by gowrap. DO NOT EDIT.
// template: ../../../core/pkg/decorators/templates/prometheus_metrics.template.go
// gowrap: http://github.com/hexdigest/gowrap

package servicedecorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/services -i UserService -t ../../../core/pkg/decorators/templates/prometheus_metrics.template.go -o prometheus_metrics.gen.go -v metricPrefix=service_request -l ""

import (
	"context"
	"time"

	"github.com/YFatMR/go_messenger/user_service/entities/token"
	"github.com/YFatMR/go_messenger/user_service/entities/unsafecredential"
	"github.com/YFatMR/go_messenger/user_service/entities/user"
	"github.com/YFatMR/go_messenger/user_service/entities/userid"
	"github.com/YFatMR/go_messenger/user_service/services"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

type databaseOperatinTag string

const (
	okStatusTag    = "ok"
	errorStatusTag = "error"
)

// Prefixes:
// database_query: for database
// service_request: for seervices

// Naming rule: https://prometheus.io/docs/practices/naming/
var (
	durationSeconds = promauto.NewHistogramVec(prometheus.HistogramOpts{
		Name:    "service_request_duration_seconds",
		Buckets: []float64{0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 2, 4},
		Help:    "Duration of one database query",
	}, []string{"status", "operation"})
	processedTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "service_request_processed_total",
		Help: "Count of query to database",
	}, []string{"status", "operation"})
	startProcessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "service_request_start_process_total",
		Help: "Count of started queries",
	})
)

// PrometheusMetricsUserServiceDecorator implements services.UserService that is instrumented with custom zap logger
type PrometheusMetricsUserServiceDecorator struct {
	base services.UserService
}

// NewPrometheusMetricsUserServiceDecorator instruments an implementation of the services.UserService with simple logging
func NewPrometheusMetricsUserServiceDecorator(base services.UserService) *PrometheusMetricsUserServiceDecorator {
	if base == nil {
		panic("PrometheusMetricsUserServiceDecorator got empty base")
	}
	return &PrometheusMetricsUserServiceDecorator{
		base: base,
	}
}

// Create implements services.UserService
func (d *PrometheusMetricsUserServiceDecorator) Create(ctx context.Context, user *user.Entity, unsafeCredential *unsafecredential.Entity) (userID *userid.Entity, err error) {

	startTime := time.Now()
	startProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag

		if err != nil {
			statusTag = errorStatusTag
		}

		durationSeconds.WithLabelValues(statusTag, "create").Observe(functionDuration)
		processedTotal.WithLabelValues(statusTag, "create").Inc()
	}()
	return d.base.Create(ctx, user, unsafeCredential)
}

// DeleteByID implements services.UserService
func (d *PrometheusMetricsUserServiceDecorator) DeleteByID(ctx context.Context, userID *userid.Entity) (err error) {

	startTime := time.Now()
	startProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag

		if err != nil {
			statusTag = errorStatusTag
		}

		durationSeconds.WithLabelValues(statusTag, "delete_by_id").Observe(functionDuration)
		processedTotal.WithLabelValues(statusTag, "delete_by_id").Inc()
	}()
	return d.base.DeleteByID(ctx, userID)
}

// GenerateToken implements services.UserService
func (d *PrometheusMetricsUserServiceDecorator) GenerateToken(ctx context.Context, unsafeCredential *unsafecredential.Entity) (token *token.Entity, err error) {

	startTime := time.Now()
	startProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag

		if err != nil {
			statusTag = errorStatusTag
		}

		durationSeconds.WithLabelValues(statusTag, "generate_token").Observe(functionDuration)
		processedTotal.WithLabelValues(statusTag, "generate_token").Inc()
	}()
	return d.base.GenerateToken(ctx, unsafeCredential)
}

// GetByID implements services.UserService
func (d *PrometheusMetricsUserServiceDecorator) GetByID(ctx context.Context, userID *userid.Entity) (user *user.Entity, err error) {

	startTime := time.Now()
	startProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag

		if err != nil {
			statusTag = errorStatusTag
		}

		durationSeconds.WithLabelValues(statusTag, "get_by_id").Observe(functionDuration)
		processedTotal.WithLabelValues(statusTag, "get_by_id").Inc()
	}()
	return d.base.GetByID(ctx, userID)
}
