// Code generated by gowrap. DO NOT EDIT.
// template: ../../../core/pkg/decorators/templates/czap_logger.template.go
// gowrap: http://github.com/hexdigest/gowrap

package repositorydecorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/repositories -i UserRepository -t ../../../core/pkg/decorators/templates/czap_logger.template.go -o czap_logger.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/czap"
	"github.com/YFatMR/go_messenger/user_service/entities/account"
	"github.com/YFatMR/go_messenger/user_service/entities/credential"
	"github.com/YFatMR/go_messenger/user_service/entities/user"
	"github.com/YFatMR/go_messenger/user_service/entities/userid"
	"github.com/YFatMR/go_messenger/user_service/repositories"
	"go.uber.org/zap"
)

// LoggingUserRepositoryDecorator implements repositories.UserRepository that is instrumented with custom zap logger
type LoggingUserRepositoryDecorator struct {
	logger *czap.Logger
	base   repositories.UserRepository
}

// NewLoggingUserRepositoryDecorator instruments an implementation of the repositories.UserRepository with simple logging
func NewLoggingUserRepositoryDecorator(base repositories.UserRepository, logger *czap.Logger) *LoggingUserRepositoryDecorator {
	if base == nil {
		panic("LoggingUserRepositoryDecorator got empty base")
	}
	if logger == nil {
		panic("LoggingUserRepositoryDecorator got empty logger")
	}
	return &LoggingUserRepositoryDecorator{
		base:   base,
		logger: logger,
	}
}

// Create implements repositories.UserRepository
func (d *LoggingUserRepositoryDecorator) Create(ctx context.Context, user *user.Entity, credential *credential.Entity) (userID *userid.Entity, err error) {

	d.logger.InfoContext(ctx, "LoggingUserRepositoryDecorator: calling Create")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingUserRepositoryDecorator: Create finished")
	}()
	return d.base.Create(ctx, user, credential)
}

// DeleteByID implements repositories.UserRepository
func (d *LoggingUserRepositoryDecorator) DeleteByID(ctx context.Context, userID *userid.Entity) (err error) {

	d.logger.InfoContext(ctx, "LoggingUserRepositoryDecorator: calling DeleteByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingUserRepositoryDecorator: DeleteByID finished")
	}()
	return d.base.DeleteByID(ctx, userID)
}

// GetAccountByLogin implements repositories.UserRepository
func (d *LoggingUserRepositoryDecorator) GetAccountByLogin(ctx context.Context, login string) (account *account.Entity, err error) {

	d.logger.InfoContext(ctx, "LoggingUserRepositoryDecorator: calling GetAccountByLogin")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingUserRepositoryDecorator: GetAccountByLogin finished")
	}()
	return d.base.GetAccountByLogin(ctx, login)
}

// GetByID implements repositories.UserRepository
func (d *LoggingUserRepositoryDecorator) GetByID(ctx context.Context, userID *userid.Entity) (user *user.Entity, err error) {

	d.logger.InfoContext(ctx, "LoggingUserRepositoryDecorator: calling GetByID")
	defer func() {
		if err != nil {
			d.logger.ErrorContext(ctx, "", zap.NamedError("public api error", err))
		}
		d.logger.InfoContext(ctx, "LoggingUserRepositoryDecorator: GetByID finished")
	}()
	return d.base.GetByID(ctx, userID)
}
