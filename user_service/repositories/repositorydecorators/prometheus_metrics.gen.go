// Code generated by gowrap. DO NOT EDIT.
// template: ../../../core/pkg/decorators/templates/prometheus_metrics.template.go
// gowrap: http://github.com/hexdigest/gowrap

package repositorydecorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/repositories -i UserRepository -t ../../../core/pkg/decorators/templates/prometheus_metrics.template.go -o prometheus_metrics.gen.go -v metricPrefix=database_query -l ""

import (
	"context"
	"time"

	"github.com/YFatMR/go_messenger/user_service/entities/account"
	"github.com/YFatMR/go_messenger/user_service/entities/credential"
	"github.com/YFatMR/go_messenger/user_service/entities/user"
	"github.com/YFatMR/go_messenger/user_service/entities/userid"
	"github.com/YFatMR/go_messenger/user_service/repositories"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

type databaseOperatinTag string

const (
	okStatusTag    = "ok"
	errorStatusTag = "error"
)

// Prefixes:
// database_query: for database
// service_request: for seervices

// Naming rule: https://prometheus.io/docs/practices/naming/
var (
	durationSeconds = promauto.NewHistogramVec(prometheus.HistogramOpts{
		Name:    "database_query_duration_seconds",
		Buckets: []float64{0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 2, 4},
		Help:    "Duration of one database query",
	}, []string{"status", "operation"})
	processedTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "database_query_processed_total",
		Help: "Count of query to database",
	}, []string{"status", "operation"})
	startProcessTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "database_query_start_process_total",
		Help: "Count of started queries",
	})
)

// PrometheusMetricsUserRepositoryDecorator implements repositories.UserRepository that is instrumented with custom zap logger
type PrometheusMetricsUserRepositoryDecorator struct {
	base repositories.UserRepository
}

// NewPrometheusMetricsUserRepositoryDecorator instruments an implementation of the repositories.UserRepository with simple logging
func NewPrometheusMetricsUserRepositoryDecorator(base repositories.UserRepository) *PrometheusMetricsUserRepositoryDecorator {
	if base == nil {
		panic("PrometheusMetricsUserRepositoryDecorator got empty base")
	}
	return &PrometheusMetricsUserRepositoryDecorator{
		base: base,
	}
}

// Create implements repositories.UserRepository
func (d *PrometheusMetricsUserRepositoryDecorator) Create(ctx context.Context, user *user.Entity, credential *credential.Entity) (userID *userid.Entity, err error) {

	startTime := time.Now()
	startProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag

		if err != nil {
			statusTag = errorStatusTag
		}

		durationSeconds.WithLabelValues(statusTag, "create").Observe(functionDuration)
		processedTotal.WithLabelValues(statusTag, "create").Inc()
	}()
	return d.base.Create(ctx, user, credential)
}

// DeleteByID implements repositories.UserRepository
func (d *PrometheusMetricsUserRepositoryDecorator) DeleteByID(ctx context.Context, userID *userid.Entity) (err error) {

	startTime := time.Now()
	startProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag

		if err != nil {
			statusTag = errorStatusTag
		}

		durationSeconds.WithLabelValues(statusTag, "delete_by_id").Observe(functionDuration)
		processedTotal.WithLabelValues(statusTag, "delete_by_id").Inc()
	}()
	return d.base.DeleteByID(ctx, userID)
}

// GetAccountByLogin implements repositories.UserRepository
func (d *PrometheusMetricsUserRepositoryDecorator) GetAccountByLogin(ctx context.Context, login string) (account *account.Entity, err error) {

	startTime := time.Now()
	startProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag

		if err != nil {
			statusTag = errorStatusTag
		}

		durationSeconds.WithLabelValues(statusTag, "get_account_by_login").Observe(functionDuration)
		processedTotal.WithLabelValues(statusTag, "get_account_by_login").Inc()
	}()
	return d.base.GetAccountByLogin(ctx, login)
}

// GetByID implements repositories.UserRepository
func (d *PrometheusMetricsUserRepositoryDecorator) GetByID(ctx context.Context, userID *userid.Entity) (user *user.Entity, err error) {

	startTime := time.Now()
	startProcessTotal.Inc()
	defer func() {
		functionDuration := time.Since(startTime).Seconds()
		statusTag := okStatusTag

		if err != nil {
			statusTag = errorStatusTag
		}

		durationSeconds.WithLabelValues(statusTag, "get_by_id").Observe(functionDuration)
		processedTotal.WithLabelValues(statusTag, "get_by_id").Inc()
	}()
	return d.base.GetByID(ctx, userID)
}
