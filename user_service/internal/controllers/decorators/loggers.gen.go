// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../core/pkg/decorators/templates/common/loggers.go
// gowrap: http://github.com/hexdigest/gowrap

package decorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/internal/controllers -i UserController -t ../../../../core/pkg/decorators/templates/common/loggers.go -o loggers.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/errors/cerrors"
	"github.com/YFatMR/go_messenger/core/pkg/loggers"
	"github.com/YFatMR/go_messenger/protocol/pkg/proto"
	"github.com/YFatMR/go_messenger/user_service/internal/controllers"
	"go.uber.org/zap"
)

// LoggingUserControllerDecorator implements controllers.UserController that is instrumented with custom zap logger
type LoggingUserControllerDecorator struct {
	logger *loggers.OtelZapLoggerWithTraceID
	base   controllers.UserController
}

// NewLoggingUserControllerDecorator instruments an implementation of the controllers.UserController with simple logging
func NewLoggingUserControllerDecorator(base controllers.UserController, logger *loggers.OtelZapLoggerWithTraceID) *LoggingUserControllerDecorator {
	return &LoggingUserControllerDecorator{
		base:   base,
		logger: logger,
	}
}

// Create implements controllers.UserController
func (d *LoggingUserControllerDecorator) Create(ctx context.Context, request *proto.CreateUserDataRequest) (userID *proto.UserID, cerr cerrors.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: calling Create")
	defer func() {
		if cerr != nil {
			d.logger.ErrorContext(
				ctx, cerr.GetInternalErrorMessage(), zap.Error(cerr.GetInternalError()),
			)
		} else {
			d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: Create finished")
		}

		d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: Create finished")
	}()
	return d.base.Create(ctx, request)

}

// DeleteByID implements controllers.UserController
func (d *LoggingUserControllerDecorator) DeleteByID(ctx context.Context, request *proto.UserID) (void *proto.Void, cerr cerrors.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: calling DeleteByID")
	defer func() {
		if cerr != nil {
			d.logger.ErrorContext(
				ctx, cerr.GetInternalErrorMessage(), zap.Error(cerr.GetInternalError()),
			)
		} else {
			d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: DeleteByID finished")
		}

		d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: DeleteByID finished")
	}()
	return d.base.DeleteByID(ctx, request)

}

// GetByID implements controllers.UserController
func (d *LoggingUserControllerDecorator) GetByID(ctx context.Context, request *proto.UserID) (userData *proto.UserData, cerr cerrors.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: calling GetByID")
	defer func() {
		if cerr != nil {
			d.logger.ErrorContext(
				ctx, cerr.GetInternalErrorMessage(), zap.Error(cerr.GetInternalError()),
			)
		} else {
			d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: GetByID finished")
		}

		d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: GetByID finished")
	}()
	return d.base.GetByID(ctx, request)

}

// Ping implements controllers.UserController
func (d *LoggingUserControllerDecorator) Ping(ctx context.Context, request *proto.Void) (pong *proto.Pong, cerr cerrors.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: calling Ping")
	defer func() {
		if cerr != nil {
			d.logger.ErrorContext(
				ctx, cerr.GetInternalErrorMessage(), zap.Error(cerr.GetInternalError()),
			)
		} else {
			d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: Ping finished")
		}

		d.logger.DebugContextNoExport(ctx, "LoggingUserControllerDecorator: Ping finished")
	}()
	return d.base.Ping(ctx, request)

}
