// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../core/pkg/decorators/templates/logerr_cleaner.go
// gowrap: http://github.com/hexdigest/gowrap

package decorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/internal/controllers -i UserController -t ../../../../core/pkg/decorators/templates/logerr_cleaner.go -o logerr_cleaner.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/errors/logerr"
	"github.com/YFatMR/go_messenger/protocol/pkg/proto"
	"github.com/YFatMR/go_messenger/user_service/internal/controllers"
)

// LogerrCleanerUserControllerDecorator implements controllers.UserController
// Use LogerrCleanerUserControllerDecorator to make logerr.Error nil if it has no error
// Use LogerrCleanerUserControllerDecorator as last decorator in your chain
type LogerrCleanerUserControllerDecorator struct {
	base controllers.UserController
}

// NewLogerrCleanerUserControllerDecorator instruments an implementation of the controllers.UserController with simple logging
func NewLogerrCleanerUserControllerDecorator(base controllers.UserController) *LogerrCleanerUserControllerDecorator {
	if base == nil {
		panic("LogerrCleanerUserControllerDecorator got empty base")
	}
	return &LogerrCleanerUserControllerDecorator{
		base: base,
	}
}

// Create implements controllers.UserController
func (d *LogerrCleanerUserControllerDecorator) Create(ctx context.Context, request *proto.CreateUserDataRequest) (userID *proto.UserID, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.Create(ctx, request)
}

// DeleteByID implements controllers.UserController
func (d *LogerrCleanerUserControllerDecorator) DeleteByID(ctx context.Context, request *proto.UserID) (void *proto.Void, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.DeleteByID(ctx, request)
}

// GetByID implements controllers.UserController
func (d *LogerrCleanerUserControllerDecorator) GetByID(ctx context.Context, request *proto.UserID) (userData *proto.UserData, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.GetByID(ctx, request)
}

// Ping implements controllers.UserController
func (d *LogerrCleanerUserControllerDecorator) Ping(ctx context.Context, request *proto.Void) (pong *proto.Pong, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.Ping(ctx, request)
}
