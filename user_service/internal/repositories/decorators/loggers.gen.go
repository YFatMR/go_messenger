// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../core/pkg/decorators/templates/loggers.go
// gowrap: http://github.com/hexdigest/gowrap

package decorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/internal/repositories -i UserRepository -t ../../../../core/pkg/decorators/templates/loggers.go -o loggers.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/errors/cerrors"
	"github.com/YFatMR/go_messenger/core/pkg/loggers"
	"github.com/YFatMR/go_messenger/user_service/internal/entities/accountid"
	"github.com/YFatMR/go_messenger/user_service/internal/entities/user"
	"github.com/YFatMR/go_messenger/user_service/internal/entities/userid"
	"github.com/YFatMR/go_messenger/user_service/internal/repositories"
	"go.uber.org/zap"
)

// LoggingUserRepositoryDecorator implements repositories.UserRepository that is instrumented with custom zap logger
type LoggingUserRepositoryDecorator struct {
	logger *loggers.OtelZapLoggerWithTraceID
	base   repositories.UserRepository
}

// NewLoggingUserRepositoryDecorator instruments an implementation of the repositories.UserRepository with simple logging
func NewLoggingUserRepositoryDecorator(base repositories.UserRepository, logger *loggers.OtelZapLoggerWithTraceID) *LoggingUserRepositoryDecorator {
	return &LoggingUserRepositoryDecorator{
		base:   base,
		logger: logger,
	}
}

// Create implements repositories.UserRepository
func (d *LoggingUserRepositoryDecorator) Create(ctx context.Context, user *user.Entity, accountID *accountid.Entity) (userID *userid.Entity, cerr cerrors.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingUserRepositoryDecorator: calling Create")
	defer func() {
		if cerr != nil {
			d.logger.ErrorContext(
				ctx, cerr.GetInternalErrorMessage(), zap.Error(cerr.GetInternalError()),
			)
		} else {
			d.logger.DebugContextNoExport(ctx, "LoggingUserRepositoryDecorator: Create finished")
		}
		d.logger.DebugContextNoExport(ctx, "LoggingUserRepositoryDecorator: Create finished")
	}()
	return d.base.Create(ctx, user, accountID)
}

// DeleteByID implements repositories.UserRepository
func (d *LoggingUserRepositoryDecorator) DeleteByID(ctx context.Context, userID *userid.Entity) (cerr cerrors.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingUserRepositoryDecorator: calling DeleteByID")
	defer func() {
		if cerr != nil {
			d.logger.ErrorContext(
				ctx, cerr.GetInternalErrorMessage(), zap.Error(cerr.GetInternalError()),
			)
		} else {
			d.logger.DebugContextNoExport(ctx, "LoggingUserRepositoryDecorator: DeleteByID finished")
		}
		d.logger.DebugContextNoExport(ctx, "LoggingUserRepositoryDecorator: DeleteByID finished")
	}()
	return d.base.DeleteByID(ctx, userID)
}

// GetByID implements repositories.UserRepository
func (d *LoggingUserRepositoryDecorator) GetByID(ctx context.Context, userID *userid.Entity) (user *user.Entity, cerr cerrors.Error) {

	d.logger.DebugContextNoExport(ctx, "LoggingUserRepositoryDecorator: calling GetByID")
	defer func() {
		if cerr != nil {
			d.logger.ErrorContext(
				ctx, cerr.GetInternalErrorMessage(), zap.Error(cerr.GetInternalError()),
			)
		} else {
			d.logger.DebugContextNoExport(ctx, "LoggingUserRepositoryDecorator: GetByID finished")
		}
		d.logger.DebugContextNoExport(ctx, "LoggingUserRepositoryDecorator: GetByID finished")
	}()
	return d.base.GetByID(ctx, userID)
}
