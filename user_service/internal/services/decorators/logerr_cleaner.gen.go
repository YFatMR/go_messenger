// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../core/pkg/decorators/templates/logerr_cleaner.go
// gowrap: http://github.com/hexdigest/gowrap

package decorators

//go:generate gowrap gen -p github.com/YFatMR/go_messenger/user_service/internal/services -i UserService -t ../../../../core/pkg/decorators/templates/logerr_cleaner.go -o logerr_cleaner.gen.go -l ""

import (
	"context"

	"github.com/YFatMR/go_messenger/core/pkg/errors/logerr"
	"github.com/YFatMR/go_messenger/user_service/internal/entities/accountid"
	"github.com/YFatMR/go_messenger/user_service/internal/entities/user"
	"github.com/YFatMR/go_messenger/user_service/internal/entities/userid"
	"github.com/YFatMR/go_messenger/user_service/internal/services"
)

// LogerrCleanerUserServiceDecorator implements services.UserService
// Use LogerrCleanerUserServiceDecorator to make logerr.Error nil if it has no error
// Use LogerrCleanerUserServiceDecorator as last decorator in your chain
type LogerrCleanerUserServiceDecorator struct {
	base services.UserService
}

// NewLogerrCleanerUserServiceDecorator instruments an implementation of the services.UserService with simple logging
func NewLogerrCleanerUserServiceDecorator(base services.UserService) *LogerrCleanerUserServiceDecorator {
	if base == nil {
		panic("LogerrCleanerUserServiceDecorator got empty base")
	}
	return &LogerrCleanerUserServiceDecorator{
		base: base,
	}
}

// Create implements services.UserService
func (d *LogerrCleanerUserServiceDecorator) Create(ctx context.Context, user *user.Entity, accountID *accountid.Entity) (userID *userid.Entity, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.Create(ctx, user, accountID)
}

// DeleteByID implements services.UserService
func (d *LogerrCleanerUserServiceDecorator) DeleteByID(ctx context.Context, userID *userid.Entity) (lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.DeleteByID(ctx, userID)
}

// GetByID implements services.UserService
func (d *LogerrCleanerUserServiceDecorator) GetByID(ctx context.Context, userID *userid.Entity) (user *user.Entity, lerr logerr.Error) {

	if lerr != nil && !lerr.HasError() {
		lerr = nil
	}
	return d.base.GetByID(ctx, userID)
}
